---
title: "Kubernetes secret management"
date: "2023-06-30 19:00"
event: "Let's Code meetup"
description: A deep-dive into Kubernetes secret management and best practices.
categories: [kubernetes, "secret management"]
image: preview.png
format:
  revealjs:
    theme: default
    navigation-mode: vertical
    title-slide-attributes:
      data-background-color: "#326ce5"
      data-background-transition: slide
---

# `whoami`

**M√°rk S√°gi-Kaz√°r**

_Open Source Tech Lead @ Cisco_

CNCF Ambassador

<br>
<br>
<br>

[@sagikazarmark](https://twitter.com/sagikazarmark)

[https://sagikazarmark.hu](https://sagikazarmark.hu)

[hello@sagikazarmark.hu](mailto:hello@sagikazarmark.hu)

![](assets/cncf-ambassador-spring-2023.png){.absolute top=0 right=0 width="300"}

::: {.notes}
Empowering engineering teams to focus on their core business objectives, while seamlessly running their applications on Kubernetes.
:::

# What is secret management?

::: {.fragment}
_Sensitive information, necessary for an application to function, is made available to it._
:::

# Why is it important?

- Maintain security of sensitive information
- Reduce the risk of security (and other) incidents
- Meet compliance requirements

# Common requirements

- **Encryption:** Secrets should be encrypted both at rest and in transit.
- **Rotation:** The ability to rotate secrets regularly.
- **Access control:** Only authorized users/applications can access the secrets.
- **Auditability:** Track who is accessing which secrets and when.
- **Compliance:** Adhere to regulatory requirements related to data security.

# Challenges

- No one-size-fits-all solution
- Secret management infra can easily become a SPOF
- Solutions often become complex, increasing the chance of introducing a vulnerability

# Kubernetes secrets

- Standard Kubernetes resource
- Values are base64 encoded

## {#base64}

![](assets/base64-not-encryption.jpg){fig-align="center"}

## {#envelope-encryption}

![](assets/envelope-encryption.png){fig-align="center"}

::: {.notes}
One of the most common misconecptions about Kubernetes secrets is that they are insecure because of the use of base64 encoding.
:::

## {#rbac}

![](assets/rbac.png){fig-align="center"}

::: {.notes}
This is actually one of my favorite.
:::

## ‚ö†Ô∏è Plug the holes! ‚ö†Ô∏è

- Turn on encryption at rest
- Configure least-privilege access to Secrets

<br>

Official guide: [Good practices for Kubernetes Secrets](https://kubernetes.io/docs/concepts/security/secrets-good-practices/)

# Deploying secrets to Kubernetes

## External Secrets Operator

- [https://external-secrets.io](https://external-secrets.io)
- Synchronize secrets from an **external store** to Kubernetes
- Mount secrets as usual (env var, file)

::: {.notes}
- Configure sync via CR
- Works well with GitOps
:::

## {#external-secrets-graph}

![](assets/external-secrets-graph.embed.svg){fig-align="center"}

::: {.notes}
- Go into details, will be important later
- Secret store config (managed by platform team)
- External secret (managed by dev team)
:::

## Alternatives

- [Sealed Secrets](https://github.com/bitnami-labs/sealed-secrets)
- [SOPS](https://github.com/mozilla/sops) (+ [operator](https://github.com/isindir/sops-secrets-operator)/[Helm secrets](https://github.com/jkroepke/helm-secrets))

::: {.notes}
- They don't scale well
- Encryption requires the user to know the secret
:::

## {#secret-changed-now-what}

![](assets/secret-changed-now-what.png){.r-stretch fig-align="center"}

::: {.notes}
- File changes must be detected by applications
- Env vars cannot change
:::

## Triggering workload rollout

- Reloader: [https://github.com/stakater/Reloader](https://github.com/stakater/Reloader)
- Detects secret changes
- Triggers rollout for workloads referencing changed secrets

---

```{mermaid}
sequenceDiagram
    participant Store as Secret store
    participant ExternalSecrets as External secrets
    participant Kubernetes
    participant Reloader

    ExternalSecrets->>Store: Watch for changes
    Reloader->>Kubernetes: Watch for changes
    Store-->>ExternalSecrets: Notice secret change
    ExternalSecrets->>Kubernetes: Deploy new secret
    Kubernetes-->>Reloader: Notice secret change
    Reloader->>Kubernetes: Trigger workload rollout
```

## What could possibly go wrong?

## Who knows, so monitor everything

- [Metrics](https://external-secrets.io/main/api/metrics/#external-secret-metrics) and [SLI recommendations](https://external-secrets.io/main/api/metrics/#service-level-indicators-and-alerts)
- [Grafana dashboard](https://external-secrets.io/main/api/metrics/#dashboard) ([needs improvements](https://github.com/external-secrets/external-secrets/issues/2301))

::: {.callout-warning}
Potential **high cardinality** labels (drop metrics/labels you don't need)
:::

## Changes take effect with a delay

1. Change some configuration ‚úèÔ∏è
2. Wait until the next secret sync period ü§û
3. Hope nothing breaks üôè

**Solution:** create (and modify) test secrets at the same time.

## To sum up ESO

- Understand how (and **when**) changes will take effect
- Monitor and alert for failures

# Kubernetes without secrets üò±

## Access secret store directly

- Integrated into the application

**OR**

- "Inject" secrets into the application

::: {.notes}
- Makes the application less portable
- It's better to keep config management separate
:::

## Secret injection in Kubernetes

- Inject a **custom init** into Pods using a [mutating admission webhook](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#mutatingadmissionwebhook)
- Get secrets from secret store in the custom init
- Inject secrets as environment variables

::: {.notes}
- There are file based solutions, but mostly env
:::

## Bank-Vaults

- Started at Banzai Cloud
- Vault Swiss Army knife

[https://bank-vaults.dev](https://bank-vaults.dev)

![](assets/bv-logo.png){.absolute top=-100 right=0 width="300" style="max-height: none;"}

## Bank-Vaults secret injection

- Secret references: `vault:path/to/secret#KEY`
- Mutating webhook
  - Detect secret references
  - Mutate Pods
- Custom init replaces secret references with actual values

::: {.callout-warning}
Secret changes do not take effect (ie. trigger workload reload) at the moment.
:::

## Risks and mitigations

::: {.fragment}
**Risk:** Secret store is a [SPOF](https://en.wikipedia.org/wiki/Single_point_of_failure)

**Mitigation:** Maintain a cluster-local instance
:::

<hr>

::: {.fragment}
**Risk:** Webhook is a [SPOF](https://en.wikipedia.org/wiki/Single_point_of_failure)

**Mitigation:** Configure webhook according to [best practices](https://techblog.cisco.com/blog/dark-side-of-kubernetes-admission-webhooks)
:::

## Alternatives

- [Kamus](https://github.com/Soluto/kamus)
- [Secrets Store CSI Driver](https://secrets-store-csi-driver.sigs.k8s.io/)

# Demo {background-color="#326ce5"}

::: {style="font-size: 30px;"}
https://github.com/sagikazarmark/demo-oss-na-2023-kube-secret-rotation

https://github.com/sagikazarmark/demo-bank-vaults-secret-injection
:::

# Final thoughts

> **_It seems wisest to assume the worst from the beginning...and let anything better come as a surprise._**

--- [Jules Verne](https://www.goodreads.com/quotes/659128-it-seems-wisest-to-assume-the-worst-from-the-beginning-and)

::: {.notes}
- May not be the best life advice/key to hapiness
- Prepare for the worst
- Understand the trade-offs and limitations of each solution
:::

# Thank you

_Any questions?_

<br>
<br>

[@sagikazarmark](https://twitter.com/sagikazarmark)

[https://sagikazarmark.hu](https://sagikazarmark.hu)

[hello@sagikazarmark.hu](mailto:hello@sagikazarmark.hu)
