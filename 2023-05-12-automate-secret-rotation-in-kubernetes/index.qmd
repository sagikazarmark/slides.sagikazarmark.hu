---
title: "Automate secret rotation in Kubernetes, then get out of the way!"
date: "2023-05-12 11:00"
event: "Open Source Summit NA 2023"
description: |
  Industry best practices say that we should rotate secrets frequently to ensure our systems and data stay safe, but doing that in an operationally safe way is often a challenge.
  Not only that, but due to the vast number of regulations and compliance requirements, different secret management solutions, even figuring out where to start can be hard.

  In his presentation, Mark will provide guidance to understand the landscape of secret management and rotation solutions in Kubernetes and will show you how to set up and operate them in a safe and reliable,
  but more importantly, automated way. You might have seen Mark's presentation about the same subject at FOSDEM '23.
  Due to time constraints that was a brief, introductory talk. This time, Mark will go into details about monitoring your secret management infrastructure,
  so you can be sure your secrets are rotated. He will also offer alternative solutions to Kubernetes secrets if you are in no position to trust your provider.
categories: [kubernetes, "secret management"]
image: preview.png
format:
  revealjs:
    theme: [default, custom.scss]
    navigation-mode: vertical
    title-slide-attributes:
      data-background-color: black
      data-background-image: title-bg.png
      data-background-transition: slide
    logo: lf-logo.svg
---

# `whoami`

**M√°rk S√°gi-Kaz√°r**

_Open Source Tech Lead @ Cisco_

CNCF Ambassador

<br>
<br>
<br>

[@sagikazarmark](https://twitter.com/sagikazarmark)

[https://sagikazarmark.hu](https://sagikazarmark.hu)

[hello@sagikazarmark.hu](mailto:hello@sagikazarmark.hu)

![](assets/cncf-ambassador-spring-2023.png){.absolute top=0 right=0 width="300"}

::: {.notes}
Empowering engineering teams to focus on their core business objectives, while seamlessly running their applications on Kubernetes.
:::

# Once upon a time...

::: {.notes}
I was in a debugging session in the middle of the night.
There was an AWS permission issue in one of the applications, but as it turned out, the application was calling something that it shouldn't have.
I grabbed the credentials from the dev environment.
:::

## {#envelope-encryption}

![](assets/envelope-encryption.png){fig-align="center"}

::: {.notes}
One of the most common misconecptions about Kubernetes secrets is that they are insecure because of the use of base64 encoding.
:::

## {#rbac}

![](assets/rbac.png){fig-align="center"}

## Your secrets WILL be compromised...

~~When?~~

What are you going to do about it?

# {#rotate-all-secrets}

![](assets/rotate-all-secrets.png){fig-align="center"}

# Secret lifecycle {visibility="hidden"}

:::: {.columns}

::: {.column width="80%"}

- Short-lived (eg. workload identity tokens)
- Long-lived (static credentials)

:::

::: {.column width="20%"}

::: {.fragment style="margin-top: 0.4em; margin-bottom: 0.2em;"}
‚úÖ
:::

::: {.fragment style="margin-top: 0.4em; margin-bottom: 0.2em;"}
‚ùå
:::

:::

::::

# Why is secret rotation important?

- Maintain security of sensitive information
- Meet compliance requirements
- Reduce the risk of a data breach

# Challenges of secret rotation

- Complexity
- Time-consuming and error prone process
- Disruption of service availability

# Secret rotation should be...

- possible
- automated
- periodic

# Secret rotation flow

```{mermaid}
sequenceDiagram
    actor Operator
    participant Provider as Secret provider
    participant Store as Secret store
    participant Deploy as ???
    participant Production

    Deploy->>Store: Watch for changes
    activate Deploy
    Operator->>Provider: Generate new secret
    Provider-->>Operator: Return new secret
    Operator->>Store: Rotate secret in store
    Store-->>Deploy: Notice secret change
    deactivate Deploy
    Deploy->>Production: Deploy new secret
```

## Fully automated secret rotation {visibility="hidden"}

```{mermaid}
sequenceDiagram
    participant Provider as Secret provider
    participant Store as Secret store
    participant Deploy as ???
    participant Production

    Deploy->>Store: Watch for changes
    activate Deploy
    Store->>Provider: Generate new secret
    Provider-->>Store: Save new secret
    Store-->>Deploy: Notice secret change
    deactivate Deploy
    Deploy->>Production: Deploy new secret
```

# Secret rotation in Kubernetes

## Plug the holes first!

- Turn on encryption at rest
- Configure least-privilege access to Secrets

<br>

Official guide: [Good practices for Kubernetes Secrets](https://kubernetes.io/docs/concepts/security/secrets-good-practices/)

## Deploying secrets to Kubernetes

- External Secrets Operator (ESO): [https://external-secrets.io](https://external-secrets.io)
- Synchronize secrets from an **external store** to Kubernetes
- Mount secrets as usual (env var, file)

## {#external-secrets-graph}

![](assets/external-secrets-graph.embed.svg){fig-align="center"}

## Alternatives

- [Sealed Secrets](https://github.com/bitnami-labs/sealed-secrets)
- [SOPS](https://github.com/mozilla/sops) (+ [operator](https://github.com/isindir/sops-secrets-operator)/[Helm secrets](https://github.com/jkroepke/helm-secrets))

## {#secret-changed-now-what}

![](assets/secret-changed-now-what.png){.r-stretch fig-align="center"}

## Triggering workload rollout

- Reloader: [https://github.com/stakater/Reloader](https://github.com/stakater/Reloader)
- Detects secret changes
- Triggers rollout for workloads referencing changed secrets

---

```{mermaid}
sequenceDiagram
    participant Store as Secret store
    participant ExternalSecrets as External secrets
    participant Kubernetes
    participant Reloader

    ExternalSecrets->>Store: Watch for changes
    Reloader->>Kubernetes: Watch for changes
    Store-->>ExternalSecrets: Notice secret change
    ExternalSecrets->>Kubernetes: Deploy new secret
    Kubernetes-->>Reloader: Notice secret change
    Reloader->>Kubernetes: Trigger workload rollout
```

## What could possibly go wrong?

## Who knows, so monitor everything

- [Metrics](https://external-secrets.io/main/api/metrics/#external-secret-metrics) and [SLI recommendations](https://external-secrets.io/main/api/metrics/#service-level-indicators-and-alerts)
  - Potential high cardinality labels (configure `ServiceMonitor` to drop resource names)
- [Grafana dashboard](https://external-secrets.io/main/api/metrics/#dashboard) (needs improvements)

## Changes take effect with a delay

1. Change some configuration ‚úèÔ∏è
2. Wait until the next secret sync period ü§û
3. Hope nothing breaks üôè

**Solution:** create (and modify) test secrets at the same time.

## Cascading effect of an outage ^[May not be a problem anymore]

_Requirement: Use store validation._

1. Provider goes down for a long time (ie. hours) ‚ùå
2. Store validation reaches a backoff of hours ‚è≥
3. Secret synchronization essentially stops üò±

**Solution:** Bump every `(Cluster)SecretStore` after an outage.

<br>
<br>

## To sum up ESO

- Understand how (and **when**) changes will take effect
- Monitor and alert for faliures

# A world without Kubernetes secrets

## Bank-Vaults

## Alternatives

- [Kamus](https://github.com/Soluto/kamus)
- [Secrets Store CSI Driver](https://secrets-store-csi-driver.sigs.k8s.io/)

# Demo {background-color="#326ce5"}

::: {style="font-size: 30px;"}
https://github.com/sagikazarmark/demo-oss-na-2023-kube-secret-rotation
:::

# Thank you

_Any questions?_

<br>
<br>

[@sagikazarmark](https://twitter.com/sagikazarmark)

[https://sagikazarmark.hu](https://sagikazarmark.hu)

[hello@sagikazarmark.hu](mailto:hello@sagikazarmark.hu)

# {#last background-color="black" background-image="last.png" background-transition="slide"}
