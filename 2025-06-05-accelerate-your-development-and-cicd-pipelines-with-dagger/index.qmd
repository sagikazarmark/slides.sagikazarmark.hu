---
title: "Accelerate Your Development and CI/CD Pipelines with Dagger"
date: "2025-06-05 13:20"
event: "KCD Czech & Slovak"
eventUrl: https://kcd-czech-slovak-2025.sessionize.com/session/842259
description: |
    Tired of environment drift and inconsistent build results across machines and CI servers? Frustrated by onboarding delays when setting up development environments on new hardware or debugging why scripts fail in CI but work locally?

    If any of the above resonates, this workshop (and Dagger) is for you.

    Dagger is a portable, programmable CI/CD engine that runs your pipelines in containers. In this workshop, we'll explore how Dagger can:

    - Eliminate Environment Discrepancies: Use containerization to ensure your development and CI environments are identical.
    - Simplify Onboarding: Create self-contained environments that new team members can spin up instantly.
    - Streamline CI/CD Pipelines: Define complex pipelines with code-first configuration, reducing failures due to environment differences.
    - Enhance Productivity: Focus on coding rather than environment setup and debugging.
    - Through a hands-on session, we'll port an existing development and CI setup to Dagger using a realistic example project. You'll gain practical experience in:
    - Writing Dagger pipelines using Go
    - Orchestrating builds, tests, and deployments in a consistent environment
    - Integrating Dagger into existing workflows

    By the end of this workshop, you'll be equipped to leverage Dagger to standardize environments, accelerate your CI/CD pipelines, and improve team collaboration.
categories: [cicd, dagger]
# image: preview.png
format:
  revealjs:
    css: custom.css
    navigation-mode: vertical
    title-slide-attributes:
      data-background-color: "#030525"
      data-background-transition: slide
    logo: assets/dagger-on-white.svg
---

# `whoami`

**MÃ¡rk SÃ¡gi-KazÃ¡r**

_Cloud Native Ambassador_

_Dagger Commander_

<br>
**YAML engineer for life** ðŸ˜­

<br>
<br>

[@sagikazarmark](https://twitter.com/sagikazarmark)

[https://sagikazarmark.com](https://sagikazarmark.com)

[hello@sagikazarmark.com](mailto:hello@sagikazarmark.com)

![](assets/cncf-ambassador-h1-2024.png){.absolute top=0 right=0 width="300"}
![](assets/dagger-commander.svg){.absolute top=350 right=0 width="300"}

# Agenda

- Introduction
- Module 1: Getting to know Dagger
- Module 2: Let's Daggerize
- Module 3: Working with modules
- Module 4: Publishing artifacts
- Module 5: Integrating with GitHub Actions
- Q&A

# Environment drift

## Developer environment

```sh
brew install go
nix-env -i gotestsum
sudo apt-get install golangci-lint

make build
just test
task lint
```

::: {.fragment}
::: {.callout-important appearance="minimal"}
**What version of Go have you just installed?**
:::
:::

## CI/CD environment

```{.yaml code-line-numbers="|3,10"}
- uses: actions/setup-go@v5
  with:
    go-version: "1.24.0"

- run: go build .
- run: go test -race -v ./â€¦

- uses: golangci/golangci-lint-action@v7
  with:
    version: "v2.0.0"
```

::: {.notes}
- custom, vendor-specific format
:::

## Artifacts

```{.dockerfile code-line-numbers="|1"}
FROM golang:1.23 AS go

RUN go build -o app .


FROM alpine

COPY --from=go /app /usr/local/bin/
```

## Is there a way to create portable environments that work the same on every machine?

## Containers!

## Is `docker run` the answer?

- It's inconvenient
- No "workflow"
- There is a missing piece

## {#environments}

![](assets/environments.svg){fig-align="center"}

# Push'n'Pray

## {#pushnpray-code transition="fade"}

![](assets/pushnpray-code.svg){fig-align="center"}

## {#pushnpray-commit transition="fade"}

![](assets/pushnpray-commit.svg){fig-align="center"}

## {#pushnpray-wait transition="fade"}

![](assets/pushnpray-wait.svg){fig-align="center"}

## {#pushnpray-eternity background-image="assets/eternity.png" background-transition="slide" background-transition-speed="fast"}

## {#pushnpray-fail}

![](assets/pushnpray-fail.svg){fig-align="center"}

## {#pushnpray-github background-color="black" background-image="assets/pushnpray.png" background-transition="fade"}

## {#pushnpray-pain}

![](assets/pushnpray-pain.svg){fig-align="center"}

## {#nopushnpray-code transition="fade-out"}

![](assets/nopushnpray-code.svg){fig-align="center"}

## {#nopushnpray-profit transition="fade"}

![](assets/nopushnpray-profit.svg){fig-align="center"}

## No more Push'n'Pray

- âŒ› Shorter feedback loop
- ðŸ’¸ Less CI resources wasted ^[Planet Earth sends her regards]
- ðŸ¤¯ You stay sane

# YAML

## Day 1...

```yaml
name: CI

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: |
          build
          test
          lint
```

## Day 101

700+ lines of YAML & Bash monstrosity

```yaml
# Foobar pipeline
# Include the Common CI pipeline parameters.
include:
  - project: 'foo/bar/foobarproject/cicdtemplate'
    file: '/Common.gitlab-ci.yml'
  #- /force-app/ui-tests/pipeline.yml

stages:
  - build-metadata-package
  - run-js-tests
  - validate-package
  - deploy-package
  - run-unit-tests
  - run-api-tests
  - run-ui-tests
  - integration

####################################################
# Builds the Metadata Package, builds the Package
# files and Destructive changes
####################################################
build-metadata-package:
  stage: build-metadata-package
  except:
    ...
```

## How did we end up in this mess?

## YAML is a _data serialization_ language

## YAML...

- is not reusable ^[Anchors don't count]
- is not composable
- provides poor control flow
- is not portable (vendor lock-in)

::: {.callout-important appearance="minimal"}
**YAML is a poor choice of language for software development workflows.**
:::

## How about using a _real_ programming language?

::: {.notes}
Stop treating software pipelines as configuration.
:::

## How about using a programming language _you already know_?

## Programming language + Containers = Dagger

- Write your pipelines in plain code
- Orchestrate containers
- No more fragile pipelines that nobody can fix

## Example: Dagger Function

```go
func (m *Module) Build() *dagger.Container {
    return dag.Container().
        From("golang").
        WithExec([]string{"go", "build", "-o", "app", "."})
}
```

## TODO: diagram explaining how dagger functions work

## Example: Control Flow

:::: {.columns}

::: {.column width="55%"}
```yaml
steps:
- uses: haya14busa/action-cond@v1
  id: release
  with:
    cond: ${{ github.event_name == 'tag' }}
    if_true: "true"
    if_false: "false"
- name: Do something
  run: echo "${{ steps.release.outputs.value }}"
```
:::

::: {.column width="45%"}
```go
if release {
    // do something
} else {
    // do something else
}
```
:::

::::

# Workshop

_Let's get our hands dirty!_

## Workshop environment

:::: {.columns}

::: {.column width="60%"}
- Use your own machine
- Use the [online playground](https://labs.iximiuz.com/trainings/TODO)
:::

::: {.column width="40%"}
{{< qrcode width=250 height=250 https://labs.iximiuz.com/trainings/TODO qr1 >}}
[_[skm.li/TODO](https://skm.li/TODO)_]{.class style="font-size: 70%"}
:::

::::

## Prerequisites

-  Make sure Docker is installed and running.
-  Make sure [Go](https://go.dev/dl/) is installed.
-  Install the latest [Dagger CLI](https://docs.dagger.io/install).
-  Make sure you have a [GitHub](https://github.com) account set up with SSH keys.
-  Last, but not least: you'll need your favorite text editor or IDE.

## Workshop materials

[https://github.com/sagikazarmark/TODO](https://github.com/sagikazarmark/TODO)

[skm.li/TODO](https://skm.li/TODO)

# Real world exampes

[github.com/openmeterio/openmeter](https://github.com/openmeterio/openmeter)

[github.com/twirphp/twirp](https://github.com/twirphp/twirp)

# Feedback

{{< qrcode width=400 height=400 https://forms.gle/TODO qr2 >}}

[https://forms.gle/TODO](https://forms.gle/TODO)

[skm.li/TODO](https://skm.li/TODO)

# Thank you

_Any questions?_

<br>
<br>

[@sagikazarmark](https://twitter.com/sagikazarmark)

[https://sagikazarmark.com](https://sagikazarmark.com)

[hello@sagikazarmark.com](mailto:hello@sagikazarmark.com)
